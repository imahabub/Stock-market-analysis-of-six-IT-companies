!pip install yfinance

import yfinance as yf #making connection with the Yahoo finance
import pandas as pd #importing basic python library
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

"""Identify all tickers of the companies"""

tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TCS', 'INFY']

data_list = []

for ticker in tickers:
    data = yf.download(ticker, start='2020-01-01', end='2023-01-01')
    data['Ticker'] = ticker  # Add the Ticker column
    data_list.append(data)  # Append the DataFrame to the list

stock_data = pd.concat(data_list)   #prepare a dataset
stock_data.reset_index(inplace=True)

stock_data.head() #showing all the sdata columns of the dataset

stock_data.to_csv('stock_data.csv', index=False) #save the dataset

#comparision of different companies data based on close price
plt.figure(figsize=(14, 7))
for ticker in tickers:
    plt.plot(stock_data[stock_data['Ticker'] == ticker]['Date'],
             stock_data[stock_data['Ticker'] == ticker]['Close'],
             label=ticker)
plt.title('Stock Prices of Companies')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

for ticker in tickers:
    stock_data['Pct_Change'] = stock_data['Close'].pct_change()

#percentage change in closing prices
plt.figure(figsize=(15, 7))
for ticker in tickers:
    subset = stock_data[stock_data['Ticker'] == ticker]
    plt.plot(subset['Date'], subset['Pct_Change'], label=ticker)
plt.xlabel('Date')
plt.ylabel('Percentage Change')
plt.title('Percentage Change of Stock Prices (2020-2023)')
plt.legend()
plt.grid(True)
plt.show()

#Stock Prices of Companies based on volume
plt.figure(figsize=(14, 7))
for ticker in tickers:
    plt.plot(stock_data[stock_data['Ticker'] == ticker]['Date'],
             stock_data[stock_data['Ticker'] == ticker]['Volume'],
             label=ticker)
plt.title('Stock Prices of Companies based on volume')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.yscale("log")
plt.legend()
plt.show()

for ticker in tickers:
    stock_data['MarktCap'] = stock_data['Open'] * stock_data['Volume']

#analysing market Capitalisation
plt.figure(figsize=(15, 7))
for ticker in tickers:
    subset = stock_data[stock_data['Ticker'] == ticker]
    plt.plot(subset['Date'], subset['MarktCap'], label=ticker)
plt.xlabel('Date')
plt.ylabel('market Capitalisation')
plt.title('market Capitalisation of Stock Prices (2020-2023)')
plt.legend()
plt.grid(True)
plt.show()

"""K-means algorithm"""

from sklearn.cluster import KMeans

scaler = MinMaxScaler()
stock_data[['Open', 'High', 'Low', 'Close', 'Volume']] = scaler.fit_transform(stock_data[['Open', 'High', 'Low', 'Close', 'Volume']])

features = ['Open', 'High', 'Low', 'Close', 'Volume'] #determining the features of the dataset
X = stock_data[features].values

#kmeans algorithm
kmeans = KMeans(n_clusters=6, random_state=42)
stock_data['Cluster'] = kmeans.fit_predict(X)

#scatter plot for Kmeans
plt.figure(figsize=(14, 7))
for cluster in stock_data['Cluster'].unique():
    cluster_data = stock_data[stock_data['Cluster'] == cluster]
    plt.scatter(cluster_data['Date'], cluster_data['Close'], label=f'Cluster {cluster}', alpha=0.5)
plt.title('Stock Price Clustering by Date')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

def process_data(ticker_data, time_step=60): #prepare a dataset
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(ticker_data[['Close']])

    X, y = create_dataset(scaled_data, time_step)
    X = X.reshape((X.shape[0], X.shape[1], 1))

    return X, y, scaler

def train_lstm(X_train, y_train): #train LSTM model
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(LSTM(units=50))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)
    return model

def forecast(ticker_data, model, scaler, time_step=60):   #Making a function for forecasting analysis
    scaled_data = scaler.transform(ticker_data[['Close']])
    X, _ = create_dataset(scaled_data, time_step)
    X = X.reshape((X.shape[0], X.shape[1], 1))

    predictions = model.predict(X)
    predictions = scaler.inverse_transform(predictions)

    plt.figure(figsize=(14, 7))
    plt.plot(ticker_data.index[time_step+1:], ticker_data['Close'][time_step+1:], label='Actual Prices')
    plt.plot(ticker_data.index[time_step+1:], predictions, label='Predicted Prices')
    plt.title(f'{ticker} Stock Price Prediction')
    plt.xlabel('Date')
    plt.ylabel('Close Price')
    plt.legend()
    plt.show()

ticker = 'AAPL'
ticker_data = stock_data[stock_data['Ticker'] == ticker].copy()
X, y, scaler = process_data(ticker_data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
model = train_lstm(X_train, y_train)
forecast(ticker_data, model, scaler)

ticker = 'MSFT'
ticker_data = stock_data[stock_data['Ticker'] == ticker].copy()
X, y, scaler = process_data(ticker_data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
model = train_lstm(X_train, y_train)
forecast(ticker_data, model, scaler)

ticker = 'GOOGL'
ticker_data = stock_data[stock_data['Ticker'] == ticker].copy()
X, y, scaler = process_data(ticker_data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
model = train_lstm(X_train, y_train)
forecast(ticker_data, model, scaler)

ticker = 'AMZN'
ticker_data = stock_data[stock_data['Ticker'] == ticker].copy()
X, y, scaler = process_data(ticker_data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
model = train_lstm(X_train, y_train)
forecast(ticker_data, model, scaler)

ticker = 'TCS'
ticker_data = stock_data[stock_data['Ticker'] == ticker].copy()
X, y, scaler = process_data(ticker_data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
model = train_lstm(X_train, y_train)
forecast(ticker_data, model, scaler)

ticker = 'INFY'
ticker_data = stock_data[stock_data['Ticker'] == ticker].copy()
X, y, scaler = process_data(ticker_data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
model = train_lstm(X_train, y_train)
forecast(ticker_data, model, scaler)
